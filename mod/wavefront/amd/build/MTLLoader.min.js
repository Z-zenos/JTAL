define("mod_wavefront/MTLLoader",["exports","mod_wavefront/three"],(function(_exports,_three){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.MTLLoader=void 0;class MTLLoader extends _three.Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){const scope=this,path=""===this.path?_three.LoaderUtils.extractUrlBase(url):this.path,loader=new _three.FileLoader(this.manager);loader.setPath(this.path),loader.setRequestHeader(this.requestHeader),loader.setWithCredentials(this.withCredentials),loader.load(url,(function(text){try{onLoad(scope.parse(text,path))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}}),onProgress,onError)}setMaterialOptions(value){return this.materialOptions=value,this}parse(text,path){const lines=text.split("\n");let info={};const delimiter_pattern=/\s+/,materialsInfo={};for(let i=0;i<lines.length;i++){let line=lines[i];if(line=line.trim(),0===line.length||"#"===line.charAt(0))continue;const pos=line.indexOf(" ");let key=pos>=0?line.substring(0,pos):line;key=key.toLowerCase();let value=pos>=0?line.substring(pos+1):"";if(value=value.trim(),"newmtl"===key)info={name:value},materialsInfo[value]=info;else if("ka"===key||"kd"===key||"ks"===key||"ke"===key){const ss=value.split(delimiter_pattern,3);info[key]=[parseFloat(ss[0]),parseFloat(ss[1]),parseFloat(ss[2])]}else info[key]=value}const materialCreator=new MaterialCreator(this.resourcePath||path,this.materialOptions);return materialCreator.setCrossOrigin(this.crossOrigin),materialCreator.setManager(this.manager),materialCreator.setMaterials(materialsInfo),materialCreator}}_exports.MTLLoader=MTLLoader;class MaterialCreator{constructor(){let baseUrl=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.baseUrl=baseUrl,this.options=options,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.crossOrigin="anonymous",this.side=void 0!==this.options.side?this.options.side:_three.FrontSide,this.wrap=void 0!==this.options.wrap?this.options.wrap:_three.RepeatWrapping}setCrossOrigin(value){return this.crossOrigin=value,this}setManager(value){this.manager=value}setMaterials(materialsInfo){this.materialsInfo=this.convert(materialsInfo),this.materials={},this.materialsArray=[],this.nameLookup={}}convert(materialsInfo){if(!this.options)return materialsInfo;const converted={};for(const mn in materialsInfo){const mat=materialsInfo[mn],covmat={};converted[mn]=covmat;for(const prop in mat){let save=!0,value=mat[prop];const lprop=prop.toLowerCase();switch(lprop){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(value=[value[0]/255,value[1]/255,value[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===value[0]&&0===value[1]&&0===value[2]&&(save=!1)}save&&(covmat[lprop]=value)}}return converted}preload(){for(const mn in this.materialsInfo)this.create(mn)}getIndex(materialName){return this.nameLookup[materialName]}getAsArray(){let index=0;for(const mn in this.materialsInfo)this.materialsArray[index]=this.create(mn),this.nameLookup[mn]=index,index++;return this.materialsArray}create(materialName){return void 0===this.materials[materialName]&&this.createMaterial_(materialName),this.materials[materialName]}createMaterial_(materialName){const scope=this,mat=this.materialsInfo[materialName],params={name:materialName,side:this.side};function setMapForType(mapType,value){if(params[mapType])return;const texParams=scope.getTextureParams(value,params),map=scope.loadTexture((baseUrl=scope.baseUrl,"string"!=typeof(url=texParams.url)||""===url?"":/^https?:\/\//i.test(url)?url:baseUrl+url));var baseUrl,url;map.repeat.copy(texParams.scale),map.offset.copy(texParams.offset),map.wrapS=scope.wrap,map.wrapT=scope.wrap,"map"!==mapType&&"emissiveMap"!==mapType||(map.encoding=_three.sRGBEncoding),params[mapType]=map}for(const prop in mat){const value=mat[prop];let n;if(""!==value)switch(prop.toLowerCase()){case"kd":params.color=(new _three.Color).fromArray(value).convertSRGBToLinear();break;case"ks":params.specular=(new _three.Color).fromArray(value).convertSRGBToLinear();break;case"ke":params.emissive=(new _three.Color).fromArray(value).convertSRGBToLinear();break;case"map_kd":setMapForType("map",value);break;case"map_ks":setMapForType("specularMap",value);break;case"map_ke":setMapForType("emissiveMap",value);break;case"norm":setMapForType("normalMap",value);break;case"map_bump":case"bump":setMapForType("bumpMap",value);break;case"map_d":setMapForType("alphaMap",value),params.transparent=!0;break;case"ns":params.shininess=parseFloat(value);break;case"d":n=parseFloat(value),n<1&&(params.opacity=n,params.transparent=!0);break;case"tr":n=parseFloat(value),this.options&&this.options.invertTrProperty&&(n=1-n),n>0&&(params.opacity=1-n,params.transparent=!0)}}return this.materials[materialName]=new _three.MeshPhongMaterial(params),this.materials[materialName]}getTextureParams(value,matParams){const texParams={scale:new _three.Vector2(1,1),offset:new _three.Vector2(0,0)},items=value.split(/\s+/);let pos;return pos=items.indexOf("-bm"),pos>=0&&(matParams.bumpScale=parseFloat(items[pos+1]),items.splice(pos,2)),pos=items.indexOf("-s"),pos>=0&&(texParams.scale.set(parseFloat(items[pos+1]),parseFloat(items[pos+2])),items.splice(pos,4)),pos=items.indexOf("-o"),pos>=0&&(texParams.offset.set(parseFloat(items[pos+1]),parseFloat(items[pos+2])),items.splice(pos,4)),texParams.url=items.join(" ").trim(),texParams}loadTexture(url,mapping,onLoad,onProgress,onError){const manager=void 0!==this.manager?this.manager:_three.DefaultLoadingManager;let loader=manager.getHandler(url);null===loader&&(loader=new _three.TextureLoader(manager)),loader.setCrossOrigin&&loader.setCrossOrigin(this.crossOrigin);const texture=loader.load(url,onLoad,onProgress,onError);return void 0!==mapping&&(texture.mapping=mapping),texture}}}));

//# sourceMappingURL=MTLLoader.min.js.map